# Default system database load file
_bigdb_start
#
#  The following keys are contained in the base.db file, warnings and meta
#  data belong here.  This file will be split into two components base.txt
#  and user.txt, base.txt is intended to load in /usr/local/db/base.db abd
#  user.txt is for the user.db
#
#  The following key are part of the base.db file, add warnings and meta
#  data to the end of this list.
#
#
#
#
#   License GUI entries
#
#   Field Descriptor Data.  This entry contains all the Field names that are 
#   assigned in the following definitions.  This is necessary because the 
#   License GUI implementation is generalized.  That is specific keys are now 
#   hardcoded in the License GUI code.  Since user.db does not allow for 
#   wildcard searches, the License GUI code queries this key to get the list of 
#   fields.  The value of this key is a comma delimited list of field names.
#
Local.Sys.LicenseGUI.FieldList = "ProductCode, Vendor, Serial, SSLGatewayLevel, 3DNSOption, NumberofCPUs, ServiceTag, Card1MACaddress, Card2MACaddress, FIPS140Option, Authvers, Authorization"
#
#   Conditional Meta Data.  This entry is used to check conditional expressions
#   to a given depth.  For example a depth of 3 will check for DisplayIf, 
#   DisplayIf2, and DisplayIf3.  This allow a field to have multiple 
#   conditional expressions.
#
Local.Sys.LicenseGUI.CondDepth = "1"
#
#   File Management
#
Local.Sys.LicenseGUI.File = "/config/bigip.license"
Local.Sys.LicenseGUI.File.Backup = "/usr/local/license_backup/bigip.license.0"
Local.Sys.LicenseGUI.Tweaker.Script_adjust = "/usr/sbin/first_time/tweak_license"
#
#   License GUI Field: Vendor
#
Local.Sys.LicenseGUI.Field.Vendor.Name = "Vendor"
Local.Sys.LicenseGUI.Field.Vendor.Value.Default = "F5 Networks, Inc."
#
#   License GUI Field: Serial
#
Local.Sys.LicenseGUI.Field.Serial.Name = "Serial"
Local.Sys.LicenseGUI.Field.Serial.HTML = "<input type=text>"
#
#   License GUI Field: SSL Gateway Level
#
Local.Sys.LicenseGUI.Field.SSLGatewayLevel.Name = "SSL Gateway Level"
Local.Sys.LicenseGUI.Field.SSLGatewayLevel.HTML = "<select><option value=''>None <option value='2'>2 <option value='3'>3 <option value='4'>4 <option value='5'>5 <option value='6'>6 <option value='8'>8 <option value='9'>9 <option value='10'>10 <option value='15'>15</select>"
#
#   License GUI Field: 3DNS Option
#
Local.Sys.LicenseGUI.Field.3DNSOption.Name = "3DNS Option"
Local.Sys.LicenseGUI.Field.3DNSOption.HTML = "<select><option value='no'>no <option value='yes'>yes</select>"
#
#   License GUI Field: Number of CPUs
#
Local.Sys.LicenseGUI.Field.NumberofCPUs.Name = "Number of CPUs" 
Local.Sys.LicenseGUI.Field.NumberofCPUs.HTML = "<select><option value='1'>1 <option value='2'>2 <option value='3'>3 <option value='4'>4 <option value='5'>5 <option value='6'>6 <option value='7'>7 <option value='8'>8</select>"
#
#   License GUI Field: Service Tag
#
Local.Sys.LicenseGUI.Field.ServiceTag.Name = "Service Tag"
Local.Sys.LicenseGUI.Field.ServiceTag.HTML = "<input type=text>"
Local.Sys.LicenseGUI.Field.ServiceTag.DisplayIf.Vendor.Contains = "Dell"
#
#   License GUI Field: Card 1 MAC address
#
Local.Sys.LicenseGUI.Field.Card1MACaddress.Name = "Card 1 MAC address"
Local.Sys.LicenseGUI.Field.Card1MACaddress.HTML = "<input type=text>"
Local.Sys.LicenseGUI.Field.Card1MACaddress.DisplayUnless.Vendor.Contains = "Dell"
#
#   License GUI Field: Card 2 MAC address
#
Local.Sys.LicenseGUI.Field.Card2MACaddress.Name = "Card 2 MAC address"
Local.Sys.LicenseGUI.Field.Card2MACaddress.HTML = "<input type=text>"
Local.Sys.LicenseGUI.Field.Card2MACaddress.DisplayUnless.Vendor.Contains = "Dell"
#
#   License GUI Field: FIPS-140 Option
#
Local.Sys.LicenseGUI.Field.FIPS140Option.Name = "FIPS-140 Option"
Local.Sys.LicenseGUI.Field.FIPS140Option.HTML = "<select><option value='no'>no <option value='yes'>yes</select>"
#   
#   License GUI Field: Auth vers
#
Local.Sys.LicenseGUI.Field.Authvers.Name = "Auth vers"
Local.Sys.LicenseGUI.Field.Authvers.Value.Default = "3"
#
#   License GUI Field: Product Code
#
Local.Sys.LicenseGUI.Field.ProductCode.Name = "Product Code"
Local.Sys.LicenseGUI.Field.ProductCode.HTML = "<select><option value='HA'>BIG-IP<option value='LB'>BIG-IP Load Balancer<option value='3DNS'>3-DNS <option value='FLB'>BIG-IP Fire Guard<option value='CLB'>BIG-IP Cache Controller<option value='XLB'>BIG-IP Load Balancer or Fire Guard or Cache Controller <option value='SSL'>BIG-IP e-Commerce Controller </select>"
#   
#   License GUI Field: Authorization
#
Local.Sys.LicenseGUI.Field.Authorization.Name = "Authorization"
Local.Sys.LicenseGUI.Field.Authorization.HTML = "<input type=text>"
#
#   The following keys are normal configuration keys normally reside in the
#   /config/user.db which has read/write access.  The keys above here are
#   in the /usr/local/db/base.db.
#
#ifdef BIGDB_USER
#
#
#   Entry to turn off multi cpu's, must reboot to take effect
#   Set to zero to turn off multiple cpus 
#
Local.Bigip.Boot_Multi_Cpu = 1
#
#
#   Delay seconds before again testing 
#   whether peer is alive.
#
Common.Bigip.Failover.AwaitPeerAliveDelay = 2
#
#   Delay seconds before again testing
#   whether peer is dead
#
Common.Bigip.Failover.AwaitPeerDeadDelay = 1
#
# When the sole alive active-active unit 
# determines that his peer is alive, delay
# this number of seconds to give the peer's
# monitors a chance to respond before failing
# back to the peer.
#
Common.Bigip.Failover.FailbackDelay = 60
#
#   Use active-active mode if set to one.
#   By default this is off, active-standby
#   mode is used.
#
Common.Bigip.Failover.ActiveMode = 0
#
#   If using active-active mode, failover mechanism
#   waits until receiving a command before surrendering
#   resources to a rebooted machine.
#
Common.Bigip.Failover.ManFailBack = 0
#
#       File into which failover (/sbin/sod)  logs debug info.
#
Common.Bigip.Failover.DbgFile
#
#       Failover daemon (/sbin/sod) writes the state of its
#       connection to its peer, hardwire and/or network.  This
#       info is written to the failover daemon's debug log file.
#
Common.Bigip.Failover.PrintPeerState = 0
#
#   Failover daemon uses /dev/tty00 for hardwired failover 
#   Unlike failover's other bigdb entries the tty flag changes
#   will only take effect after /sbin/sod is restarted not
#   simply as the result of a bigpipe failover init.
#
Common.Bigip.Failover.UseTty00 = 0
#
#   Failover daemon uses /dev/tty01 for hardwired failover 
#   Unlike failover's other bigdb entries the tty flag changes
#   will only take effect after /sbin/sod is restarted not
#   simply as the result of a bigpipe failover init.
#
Common.Bigip.Failover.UseTty01 = 1
#
#   Failover daemon always attempts
#   to become the active unit.
#
Local.Bigip.Failover.ForceActive = 0
#
#   Failover daemon goes to standby whenever
#   it senses its peer alive.
#
Local.Bigip.Failover.ForceStandby = 0
#
#       Use the network as a backup to, or
#       instead of, the serial line for failover if this
#       value is 1.  By default this feature is off.
#
Common.Sys.Failover.Network = 0
#
#       After sending a ping to this system's peer, wait
#       this many seconds before timing out and sending
#       another ping.
#
Common.Sys.Failover.NetTimeoutSec = 3
#
#       Resend the ping and timeout this many times
#       before assuming that the peer system is dead.
#
Common.Sys.Failover.NetRetryLimit = 3
#
#       An active unit sends a heartbeat message to its
#       peer with this frequency.  Default is 1 sec.
#
Common.Bigip.Cluster.ActiveKeepAliveSec = 1
#
#       Consider the peer system dead if you have not
#       heard a message within this timeout period.
#       Used by network failover.
#       Default is 3 sec.
#
Common.Bigip.Cluster.StandbyTimeoutSec = 3
#
#       File into which debug info is written, required
#       if debug level is specified (below).
#
Common.Bigip.StateMirror.DbgFile
#
#       The debug level is composed of the following
#       bits or'd together:
#       1 - log reads and writes
#       2 - log connection attempts and results
#       4 - log state changes
#       8 - open log files in append mode, the default
#           is to truncate the files when opening.
#       The debug level is zero by default.
#       
Common.Bigip.StateMirror.DbgLevel = 0
#
# By default, state mirroring causes mirrored data
# structures to be deleted when it receives a new connection.
# This assures that missed delete messages will not cause
# memory to be lost.
# It will soon be brought up to date by its peer.  
# This could cause a delay if the system is absolutely loaded 
# so turning off the gc is provided as an option.
#
Common.Bigip.StateMirror.NoGC = 0
#
#       Enables writing of data from the active unit's kernel 
#       into this file.  This data file can be read with
#       the sfread program.
#
Common.Bigip.StateMirror.ActiveFile
#
#       Enables writing of standby data 
#       into this file.  This data file can be read with
#       the sfread program.
#
Common.Bigip.StateMirror.StandbyFile
#
#       Port on which the system listens for connects
#       from the active unit.  Default is 1028.
#
Common.Bigip.StateMirror.PeerListenPort = 1028
#
#   Bigstart logs to the file /var/log/bigip
#   unless this key is set to one.
#
Common.BigStart.LogOff = 0
#
#   Bigstart looks for action directories
#   in the directory /etc/bigstart unless this
#   key specifies a different directory.
#
Common.BigStart.DirRoot = /etc/bigstart
#
#   Bigstart waits for a child for ten seconds
#   before killing it.  This key changes the
#   number of seconds.
#
Common.BigStart.ChildWaitSec = 15
#
#   Bigstart console output can be formatted in three ways,
#   terse, verbose, or none.
#
Common.BigStart.Output
#
#   Bigstart can send the output (stdout and stderr) of child
#   processes to console or devnull.
#
Common.BigStart.ChildOutput = console
#
#   The checkd daemon checks the status of the
#   httpsd at this rate (in seconds).
#
Common.Bigip.Checkd.CheckRateSec = 5
#
#       IP address of this system's gateway 
#
Local.Bigip.GatewayPinger.Ipaddr=0.0.0.0
#
#       Ping interval of this system's gateway pinger
#
Local.Pinger.alias=Local.Bigip.GatewayPinger.Ipaddr
#
#       Ping interval of this system's gateway pinger
#
Local.Bigip.GatewayPinger.Pinginterval=0
#
#       Timeout of this system's gateway pinger
#
Local.Bigip.GatewayPinger.Timeout=0
#
#       Used for configsync
#
Common.Bigip.StateMirror.Username
#
#       IP address of this system.  By default the
#       sfd uses the first internal interface in the
#       list returned by the bigapi_query_children BIGapi
#       command.  Set this when using multi-nic.
#
Local.Bigip.StateMirror.Ipaddr
#
#       IP address of this system's peer - REQUIRED
#
Local.Bigip.StateMirror.PeerIpaddr
#
#   Required
#   Each controller must have a unique unit id
#   1 or 2 in the event that network communication
#   is not possible with its peer.
#
Local.Bigip.Failover.UnitId
#
#   First-Time Boot Utility Fields.  These fields are populated by
#   the First Time Boot Utility.  These represent a small fraction
#   of the actual fields produced as the rest are dynamic and
#   dependent upon user input such as host names and interface
#   identifiers.
#
Local.Bigip.FTB.DefaultRoute
Local.Bigip.FTB.FailoverIp
Local.Bigip.FTB.FTP
Local.Bigip.FTB.FTP.allow
Local.Bigip.FTB.FTP.support
Local.Bigip.FTB.HostName = bigip1
Local.Bigip.FTB.HostNumber = 1
Local.Bigip.FTB.Interfaces
Local.Bigip.FTB.IsRedundant
Local.Bigip.FTB.License
Local.Bigip.FTB.Locality = domestic
Local.Bigip.FTB.Product = BIG/ip(R)
Local.Bigip.FTB.RootSet
Local.Bigip.FTB.RSH
Local.Bigip.FTB.RSH.allow
Local.Bigip.FTB.RSH.support
Local.Bigip.FTB.SupportEmail
Local.Bigip.FTB.SupportFax
Local.Bigip.FTB.SupportPhone
Local.Bigip.FTB.Telnet
Local.Bigip.FTB.Telnet.allow
Local.Bigip.FTB.Telnet.support = yes
Local.Bigip.FTB.TimeZone = US/Pacific
Local.Bigip.FTB.Vendor
Local.Bigip.FTB.VendorCommonName
Local.Bigip.FTB.VendorSupportIp
Local.Bigip.FTB.Version = "BIG/ip 3.0"
Local.Bigip.FTB.WebServer.Cert.City = Seattle
Local.Bigip.FTB.WebServer.Cert.Company = "My Company"
Local.Bigip.FTB.WebServer.Cert.Country = US
Local.Bigip.FTB.WebServer.Cert.Division = _undef_
Local.Bigip.FTB.WebServer.Cert.State = WA
Local.Bigip.FTB.WebServer.Prefix = http
Local.Bigip.FTB.WebServer.ReplaceKeys = no
#
#   The checkd daemon logs information to this
#   path/file if this key is set.
#
Common.Bigip.Checkd.DbgFile
#
# Control whether bigd reports the initial state
# of the hosts or services it is checking.
# Bigd writes the state of a node or service to
# /var/log/bigd whenever bigd is configured or
# when the state of the node or service changes.
# This key controls what bigd writes to /var/log/bigd
# when bigd is configured as follows:
#
#    all - report the initial state, up or down,
#          of all nodes and services.
#    down - report the initial state only if it
#           is down.
#    none - do not report the initial state
#
# Note that after bigd discovers the initial state
# it will always report any state change to 
# /var/log/bigd.
# 
Common.Bigip.Bigd.ReportInitNodeState = "all"
#
# Set to non-zero to cause bigd to
# generate output to debug file.
#
Common.Bigip.Bigd.Verbose = 0
#
# Set to non-zero to cause bigd to
# generate pings but not report results
# to the kernel.
#
Common.Bigip.Bigd.SimulatePings = 0
#
# Set to non-zero to cause bigd to
# allow any response from the node
# as a receive match.
#
Common.Bigip.Bigd.RecvMatchAll = 0
#
# Set to non-zero to turn off (noisy) bigd
# node pings.  Service pings are still
# enabled.
#
Common.Bigip.Bigd.NodePingOff = 0
#
# Set non-zero so that gateway pinger
# uses tcp pings rather than icmp pings.
# This will be going away.
#
Common.Bigip.Bigd.NodePingTcp = 0
#
# Set to non-zero to allow bigd to
# do host lookups.
#
Common.Bigip.Bigd.HostLookup = 0
#
# Cause bigd to send a reset after sending
# a fin when closing a socket to a transparent
# ping destination.  The good:  without this
# flag set, if the target destination sends
# data after bigd closes its socket, its fin
# will not get an ack and it will have many
# connections in the last_ack state.  Having
# the flag set eliminates this problem.  The
# bad:  many services (smtp, telnet, ...)
# complain bitterly about having a connection
# resent when they are transferring data.
#
Common.Bigip.Bigd.ResetTransparent = 0
#
# Open a debug output (log) file for
# bigd.
#
Common.Bigip.Bigd.DbgFile = "/var/log/bigdlog.<bigd_pid>"
#
# The XLB product can be an LB, a CLB or an FLB.  Which
# one it is, is specified by the following key.
#
Local.Bigip.EffectiveProductCode
#
# Default CORBA IIOP port used for LINK-IT BIG/api
#
Common.Bigip.CORBA.IIOPPort = "683"
#
# Default CORBA IIOP SSL port used for LINK-IT BIG/api
#
Common.Bigip.CORBA.IIOPSSLPort = "684"
#
# Set to "true" causes the CORBA portal to resolve
# client addresses numerically.
#
Common.Bigip.CORBA.AddrResolveNumeric = "true"
#
# Open a debug output file for each of the respective monitor
# when set to "true" or "yes"
#
Common.Bigip.HttpAgents.WMI.LogEnabled = "true"
Common.Bigip.HttpAgents.RealServer.LogEnabled = "true"
Common.Bigip.SNMPDCA.LogEnabled = "true"
#
# bigpipe display options
#
Common.Bigip.Bigpipe.DisplayServiceNames = "yes"
Common.Bigip.Bigpipe.DisplayHostNames = "no"
#endif /* BIGDB_USER */
